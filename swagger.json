{
  "swagger": "2.0",
  "info": {
    "title": "Fake Store API",
    "description": "Fake Store API",
    "version": "1.0.0"
  },
  "host": "cse-341-project2-6ng3.onrender.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Product",
      "description": "Endpoints"
    },
    {
      "name": "Customer",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/login": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api-docs": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/products/": {
      "get": {
        "tags": [
          "Product"
        ],
        "description": "Endpoint to get all Product.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "description": "Endpoint to add a Product.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Product information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProduct"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "message: ": "A new product has been added successfully.",
            "added product: ": "product"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "description": "Endpoint to get the specific product.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Product information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product registered successfully.",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "201": {
            "message: ": "The product has been deleted successfully.",
            "Updated Product: ": "product",
            "description": "Created"
          },
          "202": {
            "message: ": "A new product has been added successfully.",
            "added product: ": "product",
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "description": "Endpoint to update Product.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Product information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "message: ": "Your product has been updated successfully.",
            "Updated Product: ": "product"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "description": "Endpoint to delete all Product.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "message: ": "The product has been deleted successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/customers/": {
      "get": {
        "tags": [
          "Customer"
        ],
        "description": "Endpoint to get all Customer.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "description": "Endpoint to add a Customer.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Customer information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomer"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "message": "A new customer has been added to the database",
            "added customer": "customer"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "description": "Endpoint to get the specific customer.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "description": "Endpoint to update Customer.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Customer information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "message: ": "Your customer has been updated successfully.",
            "Updated Customer: ": "customer"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "description": "Endpoint to delete a Customer.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "message: ": "The customer has been deleted successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "Customer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "age": {
          "type": "number",
          "example": 29
        },
        "username": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "email": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "address": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "304 York Street"
            },
            "city": {
              "type": "string",
              "example": "New York"
            },
            "zip": {
              "type": "string",
              "example": "12345"
            }
          }
        },
        "phone": {
          "type": "string",
          "example": "55566677799900"
        },
        "occupation": {
          "type": "string",
          "example": "Front End Developer"
        }
      }
    },
    "CreateCustomer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "age": {
          "type": "number",
          "example": 29
        },
        "username": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "email": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "address": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "304 York Street"
            },
            "city": {
              "type": "string",
              "example": "New York"
            },
            "zip": {
              "type": "string",
              "example": "12345"
            }
          },
          "required": [
            "street",
            "city",
            "zip"
          ]
        },
        "phone": {
          "type": "string",
          "example": "55566677799900"
        },
        "occupation": {
          "type": "string",
          "example": "Front End Developer"
        }
      },
      "required": [
        "name",
        "age",
        "username",
        "email",
        "address",
        "phone",
        "occupation"
      ]
    },
    "UpdateCustomer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "age": {
          "type": "number",
          "example": 29
        },
        "username": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "email": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "address": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string",
              "example": "304 York Street"
            },
            "city": {
              "type": "string",
              "example": "New York"
            },
            "zip": {
              "type": "string",
              "example": "12345"
            }
          }
        },
        "phone": {
          "type": "string",
          "example": "55566677799900"
        },
        "occupation": {
          "type": "string",
          "example": "Front End Developer"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Product Name"
        },
        "price": {
          "type": "string",
          "example": "10.55"
        },
        "description": {
          "type": "string",
          "example": "Product Description"
        },
        "category": {
          "type": "string",
          "example": "Specify a category"
        },
        "image": {
          "type": "string",
          "example": "https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg"
        },
        "rating": {
          "type": "string",
          "example": "5"
        }
      }
    },
    "CreateProduct": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Product Name"
        },
        "price": {
          "type": "string",
          "example": "10.55"
        },
        "description": {
          "type": "string",
          "example": "Product Description"
        },
        "category": {
          "type": "string",
          "example": "Specify a category"
        },
        "image": {
          "type": "string",
          "example": "https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg"
        },
        "rating": {
          "type": "string",
          "example": "5"
        }
      },
      "required": [
        "title",
        "price",
        "description",
        "category",
        "image",
        "rating"
      ]
    },
    "UpdateProduct": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Product Name"
        },
        "price": {
          "type": "string",
          "example": "10.55"
        },
        "description": {
          "type": "string",
          "example": "Product Description"
        },
        "category": {
          "type": "string",
          "example": "Specify a category"
        },
        "image": {
          "type": "string",
          "example": "https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg"
        },
        "rating": {
          "type": "string",
          "example": "5"
        }
      }
    }
  }
}